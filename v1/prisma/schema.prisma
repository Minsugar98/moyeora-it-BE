// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Position {
  PM
  PL
  AA
  TA
  DA
  QA
  FE
  BE
  FS
}

enum Skill {
  Java
  JavaScript
  HTML_CSS
  REACT
  Vue
  Kotlin
  Spring
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  password     String
  nickname     String
  profileImage String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  position     Position
  skills       Skill[]
  Group        Group?         @relation(fields: [groupId], references: [id])
  groupId      Int?
  replies      Reply[]
  NestedReply  NestedReply[]
  Bookmark     Bookmark[]
  followers    Follow[]       @relation("Follower")
  following    Follow[]       @relation("Following")
  Notification Notification[]
  Rating       Rating[]
}

model Group {
  id              Int        @id @default(autoincrement())
  title           String
  deadline        DateTime // 모임 모집 마감일
  startDate       DateTime // 모임 시작일
  endDate         DateTime // 모임 종료일
  maxParticipants Int // 모임 최대 참여 인원
  positions       Position[]
  skills          Skill[]
  type            String //study, project, all
  autoAllow       Boolean
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  users           User[]
  Reply           Reply[]
  Bookmark        Bookmark[]
}

model Reply {
  id          Int           @id @default(autoincrement())
  content     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  User        User?         @relation(fields: [userId], references: [id])
  userId      Int?
  Group       Group?        @relation(fields: [groupId], references: [id])
  groupId     Int?
  NestedReply NestedReply[]
}

model NestedReply {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  Reply     Reply    @relation(fields: [replyId], references: [id])
  replyId   Int
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  Group     Group?   @relation(fields: [groupId], references: [id])
  groupId   Int?
}

model Follow {
  id Int @id @default(autoincrement())

  follower    User?    @relation("Follower", fields: [followerId], references: [id])
  followerId  Int?
  following   User?    @relation("Following", fields: [followingId], references: [id])
  followingId Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  content   String
  userId    Int?
  read      Boolean
}

model Rating {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  rating    Int
}
